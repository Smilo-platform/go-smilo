// Code generated by go-bindata.
// sources:
// faucet.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x7b\x6d\x93\xdb\x36\x92\xff\xeb\xf5\xa7\xe8\xf0\x6f\xaf\xa4\xff\x0c\x49\xcd\x8c\xed\x9d\xd3\x88\x4a\x79\xbd\xd9\x9c\xaf\xee\x92\x54\xe2\xd4\xdd\x56\x36\x75\x05\x12\x2d\x11\x1e\x10\x60\x00\x50\x1a\x65\x4a\xdf\xfd\x0a\x00\xc9\xa1\x28\x4a\x51\x1c\xe7\x2e\x7a\x61\xf3\x01\xe8\xc7\x1f\xba\x1b\x0d\xce\xfc\xb3\xbf\x7d\xfd\xf6\xfd\x3f\xbe\xf9\x02\x72\x53\xf0\xc5\xb3\xb9\xfd\x0f\x38\x11\xab\x24\x40\x11\xd8\x07\x48\xe8\xe2\x19\x00\xc0\xbc\x40\x43\x20\xcb\x89\xd2\x68\x92\xa0\x32\xcb\xf0\x36\xe8\xbe\xca\x8d\x29\x43\xfc\xa9\x62\xeb\x24\xf8\xaf\xf0\xfb\x37\xe1\x5b\x59\x94\xc4\xb0\x94\x63\x00\x99\x14\x06\x85\x49\x82\x77\x5f\x24\x48\x57\xb8\x37\x53\x90\x02\x93\x60\xcd\x70\x53\x4a\x65\x3a\x83\x37\x8c\x9a\x3c\xa1\xb8\x66\x19\x86\xee\xe6\x12\x98\x60\x86\x11\x1e\xea\x8c\x70\x4c\xae\x82\xc5\x33\x4f\xc9\x30\xc3\x71\xf1\xf8\x18\x7d\x85\x66\x23\xd5\xfd\x6e\x37\x83\x37\x95\xc9\x51\x18\x96\x11\x83\x14\xfe\x4e\xaa\x0c\xcd\x3c\xf6\x23\xeb\x69\x9c\x89\x7b\xc8\x15\x2e\x93\xc0\x2a\xa0\x67\x71\x9c\x51\xf1\x41\x47\x19\x97\x15\x5d\x72\xa2\x30\xca\x64\x11\x93\x0f\xe4\x21\xe6\x2c\xd5\xb1\xd9\x30\x63\x50\x85\xa9\x94\x46\x1b\x45\xca\xf8\x26\xba\x89\xfe\x12\x67\x5a\xc7\xed\xb3\xa8\x60\x22\xca\xb4\x0e\x40\x21\x4f\x02\x6d\xb6\x1c\x75\x8e\x68\x02\x88\x17\x1f\xcb\x79\x29\x85\x09\xc9\x06\xb5\x2c\x30\x7e\x19\xfd\x25\x9a\x3a\xa6\xdd\xc7\xa7\xf9\x7a\xc6\x3a\x53\xac\x34\xa0\x55\x76\x36\xe7\x0f\x3f\x55\xa8\xb6\xf1\x4d\x74\x15\x5d\xd5\x37\x8e\xd3\x07\x1d\x2c\xe6\xb1\x27\xb8\xf8\x8d\xd4\x43\x21\xcd\x36\xbe\x8e\x5e\x46\x57\x71\x49\xb2\x7b\xb2\x42\xda\xf0\xb2\xaf\xa2\xe6\xe1\x27\xe4\x7c\xcc\x97\x1f\xfa\xae\xfc\x34\xec\x0a\x59\xa0\x30\xd1\x07\x1d\x5f\x47\x57\xb7\xd1\xb4\x79\x70\xc8\xa1\x66\x61\xdd\xe7\xd9\xd9\x5f\xb4\x46\x65\xc1\xcc\xc3\x0c\x85\x41\x05\x8f\xed\x2b\xfb\x2b\x98\x08\x73\x64\xab\xdc\xcc\xe0\x6a\x3a\x7d\x71\x77\xea\xed\x3a\xdf\x7f\x4d\x99\x2e\x39\xd9\xce\x60\xc9\xf1\x61\xff\x15\xe1\x6c\x25\x42\x66\xb0\xd0\x33\xf0\x9c\x9f\x06\xec\x9e\xa4\x2b\x95\x5c\x29\xd4\xba\x27\x56\x29\x35\x33\x4c\x8a\x99\x85\x24\x31\x6c\x8d\xa7\x67\xeb\x92\x88\xa3\x24\x48\xaa\x25\xaf\x0c\x1e\x11\x3e\xe5\x32\xbb\xdf\x7f\xe7\xc2\xc6\x90\x41\x32\xc9\xa5\x9a\xc1\x26\x67\x66\x50\xa2\x52\x61\x5f\x0c\x42\x29\x13\xab\x19\xbc\x2e\x7b\x26\x2a\x88\x5a\x31\x31\x83\x69\x9f\xd0\x3c\xae\x7d\x38\x8f\x7d\x28\x7d\x36\x4f\x25\xdd\x2e\x9e\xcd\x29\x5b\x43\xc6\x89\xd6\x49\xd0\x73\x6b\x13\x1b\x3b\x23\x6c\x44\x24\x4c\xb4\xef\xfa\xef\x95\xdc\x04\xe0\x38\x25\x81\x97\x25\x4c\xa5\x31\xb2\x98\xc1\x95\x15\xb6\x33\xed\x90\x34\x0f\xf9\x2a\xbc\xba\xee\x8d\x71\xe3\xf2\xab\x86\xaa\xc1\x07\x13\x3a\x24\xb4\x18\x08\x16\x73\xd6\x50\x59\x12\x58\x92\x30\x25\x26\x0f\x80\x28\x46\xc2\x9c\x51\x8a\x22\x09\x8c\xaa\xd0\x02\x9b\x2d\xa0\x1b\x9b\x8f\x84\xe6\xfc\xaa\x27\x68\x4c\xd9\xba\xa3\x72\xef\xb6\x67\x81\x5f\x54\xf2\x16\xea\x0b\xb9\x5c\x6a\x34\xe1\xa0\xce\x9d\x69\x4c\x94\x95\x09\x57\x4a\x56\xe5\xc0\x48\x37\xda\x0d\x01\x46\x93\xa0\x52\x3c\xa8\x53\x99\xbb\x34\xdb\xb2\xb6\x5b\xd0\x5a\x49\xaa\x22\xb4\xbe\x54\x92\x07\x50\x72\x92\x61\x2e\x39\x45\x95\x04\xdf\xc9\x8c\x11\x0e\xc2\x1b\x08\xbe\xff\xf6\xdf\xa1\x76\x3a\x13\x2b\xd8\xca\x4a\xc1\x17\x26\x47\x85\x55\x01\x84\x52\xbb\x52\xa2\x28\x3a\x26\x95\x5b\x43\x87\x4a\x84\xa9\xb1\x59\xfd\x4f\xf5\x6f\x9e\x56\xc6\xc8\x76\x60\x6a\x04\xa4\x46\x84\x14\x97\xa4\xe2\x06\xa8\x92\x25\x95\x1b\x11\x1a\xb9\x5a\xd9\x24\xee\x35\xf2\x93\x02\xa0\xc4\x90\xfa\x55\x12\x34\x63\x1b\xef\x13\x5d\xca\xb2\x2a\x6b\xff\xfb\x87\xf8\x50\x12\x41\x91\x5a\xb4\x70\x8d\xc1\xe2\x4b\xb6\x46\x28\xd0\x2b\xf6\xa7\x3e\x98\x32\xa2\xd0\x84\x5d\xa2\x07\x90\x9a\xc7\x5e\x18\xaf\x52\xab\x7d\xc5\x1b\x4a\xad\x0a\x05\x8a\x0a\xf6\xee\x42\x65\x63\x61\xb0\x78\x7c\x54\x44\xac\x10\x9e\x33\xfa\x70\x09\xcf\x49\x21\x2b\x61\x60\x96\x40\xf4\xc6\x5d\xea\xdd\x6e\xd0\xc6\x2d\x37\xce\x16\x73\x72\x6a\x99\x80\x14\x19\x67\xd9\x7d\x12\x18\x86\x2a\x79\x7c\xb4\xac\x76\xbb\x3b\x78\x7c\x64\x4b\x78\x1e\x7d\x8b\x19\x29\x4d\x96\x93\xdd\x6e\xa5\x9a\xeb\x08\x1f\x30\xab\x0c\x8e\x27\x8f\x8f\xc8\x35\xee\x76\xba\x4a\x0b\x66\xc6\xcd\x74\xfb\x5c\xd0\xdd\xce\x6a\x50\x4b\xbd\xdb\x41\x6c\x89\x0a\x8a\x0f\xf0\x3c\xfa\x06\x15\x93\x54\x83\x1f\x3f\x8f\xc9\x62\x1e\x73\xb6\xa8\xe7\x1d\x55\x6a\x1e\x57\xbc\xc5\xc8\x3c\xb6\x50\x1a\x58\x25\x6e\x25\x3a\x05\xba\xf2\x9f\x5c\x4d\xab\xb0\xd5\xae\x46\x8f\x66\x06\xef\x71\x9b\x04\x8f\x8f\x5d\x2a\xf5\xdb\x8c\x70\x9e\x12\x6b\x37\xaf\x7a\x3b\xe9\x67\xb4\xa8\x5e\x33\xed\x6a\xcb\x45\x23\xcb\xa1\x5a\xbf\x2e\x7c\xf4\x02\xa8\x91\xe5\x0c\x6e\xae\xcf\x8a\x9e\xaf\x7b\x81\xe5\xe6\x17\x02\x4b\x49\x04\x72\x70\xff\x86\xba\x20\xbc\xb9\xae\x97\xde\xb1\x65\xdd\xa7\x10\xda\x5c\xd2\xca\xdd\xa6\xa7\xe9\x1d\xc8\x35\xaa\x25\x97\x9b\x19\x90\xca\xc8\x3b\x28\xc8\x43\x9b\xfd\x6f\xa6\xd3\x43\xa5\xf6\xf8\x18\x92\x72\x74\x41\x4d\xe1\x4f\x15\x6a\xa3\xdb\x10\xe6\x5f\xb9\x7f\x6d\x24\xa3\x28\x34\xd2\x9e\xe9\xac\x04\xd6\x2d\x6e\xd4\x11\x55\xf6\x5d\x71\x5a\xcb\xa5\x94\x66\x2f\xf5\x1d\x11\xb8\x16\xa2\x93\xf1\x83\xc5\xdc\xa8\xe3\xf3\xfc\x5c\xfa\xab\x72\x9c\xb2\xc5\xf5\xb1\x14\xe7\x03\xaf\x35\x5c\x89\xa8\x7c\x45\x67\xd7\x0f\xb8\xdb\x79\x6c\xe8\xa7\x15\xc6\x2e\x88\x94\x68\x3c\x47\x22\x57\x1b\x3d\x49\xe4\x6e\x7f\x07\x91\x72\x24\xca\xa4\x48\xcc\x39\x32\x2d\x2b\x41\x3b\x56\x72\x89\xe0\x77\x90\xa9\x12\x6c\x8d\x4a\x33\xb3\x3d\x57\x28\xa4\x4f\x52\xf9\xfb\xd3\x52\xcd\x63\xa3\x3e\x0a\xf1\x03\x8f\xff\xd7\xa2\xd6\x91\x9a\xef\x66\xf1\xaf\x72\x03\x54\xa2\x06\x93\x33\x0d\xb6\x20\xf9\x7c\x1e\xe7\x37\x03\x83\xcb\xc5\x7b\x3b\xc4\x39\x0e\x96\xae\x8a\x03\xa6\x41\x55\xc2\xd5\x2d\x52\x80\xc9\x71\xbf\xf2\xab\x4b\x9c\x08\xde\x4b\x5b\x63\xaf\x51\x18\x28\x08\x67\x19\x93\x95\x06\x92\x19\xa9\x34\x2c\x95\x2c\x00\x1f\x72\x52\x69\x63\x09\xd9\x10\x49\xd6\x84\x71\xb7\xd0\x1d\x6c\x40\x2a\x20\x59\x56\x15\x95\xdd\x55\x88\x15\xa0\x90\xd5\x2a\xaf\x65\x31\x12\x7c\x26\xe7\x52\xac\x5a\x79\x74\x49\x0a\x20\xc6\x90\xec\x5e\x5f\x42\x13\xdc\x80\x28\x04\xc3\x90\xda\x59\x99\x2c\x0a\x29\xe0\x46\x51\x28\x89\x32\x5b\xd0\xfb\x95\x19\xc9\x32\x57\x16\x44\xf0\x46\x6c\xa5\x40\xc8\xc9\xda\x49\x08\xef\xfd\x66\xf2\x12\xbe\x94\x72\xc5\xf1\xc2\x0a\xf8\x77\x92\x61\x2a\x65\x3b\x0d\x0a\xb2\x6d\xf8\xd6\x6a\x6c\x98\xc9\x99\xb7\x53\x89\xaa\xb0\x34\x28\x70\x56\x30\xa3\xa3\x79\x5c\x0e\x25\x92\xa7\xfa\x86\x87\xb9\x54\xec\x67\x5b\x29\xf2\xa3\x59\xc3\xf4\x22\x63\x93\x12\x1c\x60\x38\x2e\xcd\x0c\x5e\xfa\x94\xd0\x5f\x38\xf5\xfe\x78\x68\xd5\x34\x34\x5d\xf7\xc1\xe6\xe4\x19\xdc\xf8\xad\x86\xaf\xcc\xa8\x39\x26\x0e\xed\x41\xd6\x4b\x70\x7b\x5b\x3e\xb4\x42\xb5\x9b\x97\x69\x4b\xd1\xc2\x65\xdf\x70\x6b\xd6\xb1\x79\x41\xee\x11\x08\xcc\x49\xaf\xa5\x52\x6b\xe0\x36\xe2\xcc\xb5\x95\x62\xb3\x41\x34\x9f\xdb\xc0\x91\x7c\xeb\x09\x32\xb1\x7a\x71\x3d\xf5\xf0\xb5\x17\x96\xfc\x8b\xeb\x29\x13\x46\xbe\xb8\x9e\x4e\x1f\xa6\x67\xfe\x5e\x5c\x4f\xa5\x78\x71\x3d\x35\x39\xbe\xb8\x9e\xbe\xb8\xbe\xe9\x02\xdf\x3f\x69\x8a\x78\x3b\x0a\xb5\xe5\xd6\xac\x87\x00\x0c\x51\x2b\x34\x49\xf0\xdf\x24\x95\x95\x99\xa5\x9c\x88\xfb\x60\xe1\xc4\xb5\xd5\x9b\x43\xca\xf0\x56\x00\x4a\xa2\x2d\x6c\xac\xc4\x0e\x49\x75\x0b\x4d\xc3\x58\x57\x4a\xc9\x4a\xd8\xca\x00\xac\xce\x6e\x61\x8b\x91\x45\xa2\x35\xcc\x24\x9a\xa7\x2a\x5e\xbc\x95\xe5\x36\x74\x44\xdc\xf4\x03\x33\xea\xaa\x2c\xa5\x32\x51\xd7\x9c\xc4\xee\x5a\x39\xea\xf8\x76\xfa\xea\xf6\xf5\x49\xf1\xb5\xdd\xd0\x38\x1d\x5a\x09\x49\x2a\xd7\x08\x7e\xfb\x94\xca\x07\x20\x82\xc2\x92\x29\x04\xb2\x21\xdb\xcf\xe6\x31\xa5\x75\x17\xe4\x53\xe2\x79\xe5\x56\x66\x58\xf2\x4a\xdb\x52\x8d\xd9\x95\xfd\xc7\x05\xb7\x8f\x23\xf0\x0d\xaf\xf4\x25\x94\x55\xca\x99\xce\x81\x80\xc0\x0d\xcc\xb5\x51\x52\xac\x16\xee\x69\x36\x8f\xeb\x5b\x28\xa5\x36\xa7\x70\x82\x45\x8a\x94\x0e\x20\xe5\x23\x81\x62\xf9\x39\xe7\xfe\x1f\x3b\x76\x59\xc7\xd9\x3f\xae\x33\x9b\x4c\xf0\x47\xf5\xe4\xc1\x92\xdf\x6c\x36\x51\x63\x56\xb7\xde\x73\xe4\x65\x6c\xd3\x63\x25\x98\xd9\xc6\x3e\x72\x4a\x11\x7f\xce\x68\x72\x7d\x7b\xfd\xfa\xf5\xf5\xcb\x7f\xb9\x7d\xf5\xea\xfa\xf6\xe5\xab\x63\xc1\xa0\x85\xcb\x27\x88\x05\x7e\xf3\xf9\x95\x7c\x53\x99\xfc\xc8\x76\xd6\x22\xaa\xd9\xb7\xd8\x3a\x91\xda\x9d\xbe\x0a\x3e\x1a\x65\x95\xb0\x45\x73\x48\xf8\x60\x71\xfb\x5b\x70\x76\x42\xca\xdf\x88\xbd\x06\x5f\x16\x4a\xb2\x32\x56\xdb\xa6\xf1\xc6\xa4\x68\xf1\x76\x09\x9a\x15\x25\xdf\x42\xf6\x04\x8b\x61\xe0\x1d\xf5\xda\x2f\xe2\x6e\xdf\xaf\x1e\x85\xae\x7c\x2c\x24\x45\x5b\x36\xea\x4a\x67\x58\xba\x23\x23\x5b\x8a\xfd\x75\xfb\x33\x11\x86\x09\x6c\x4a\xb6\x08\xbe\x16\x7c\x0b\x95\x46\x58\x4a\x05\x14\xd3\x6a\xb5\x72\x75\xa6\x82\x52\xb1\x35\x31\xd8\xd4\x69\xba\x86\xcd\x21\x6a\x86\xbb\x1f\xf3\x98\xf2\xc1\xfa\xf6\x1f\xb2\x82\x8c\x08\x30\x8a\x64\xf7\x7e\x9d\x55\x4a\xd9\x75\x56\xa2\x57\xb5\x2d\x23\x53\xe4\x72\xe3\x86\x78\xa3\x2c\x19\x72\x57\x53\x6a\x44\xc8\xe5\x06\x8a\x2a\x73\xcb\xd9\xd6\x8c\x4e\xc3\x0d\x61\x06\x2a\x61\x18\xf7\xc6\x36\x95\x12\xb6\x02\xc5\x81\xd2\xef\xa0\xd9\x32\xc7\x62\xf1\x3e\xc7\x81\xb2\xbb\x6d\x8e\x80\xc2\xb7\x7e\x38\x94\x4a\x1a\xcc\xac\xcf\x81\xac\x08\x13\xda\x3a\xcd\x95\x98\x58\xfc\xca\xe6\x49\x7d\x59\xff\xf7\x6c\xde\x3d\x16\x89\x63\xf8\x92\xcb\x94\x70\x58\xdb\x15\x92\x72\xbb\x8b\x90\x90\x4b\x6b\x89\x8e\xf1\xb4\x21\xa6\xd2\x20\x97\xee\xa9\x57\xc1\x11\x58\x13\x65\xdd\x8d\x45\x69\x20\x69\x1a\xea\xf6\xa1\x46\xb5\x6e\x4e\x1e\xec\xbd\x61\xa8\xf6\x47\xb4\x8e\x48\xe0\x87\x1f\xef\x9e\x35\xf2\xfc\x0d\x97\x0e\x43\x76\x41\x78\x03\x98\x9c\x18\xc8\x14\x12\x83\x1a\x32\x2e\x75\xa5\xbc\x98\x54\xc9\x12\xac\xa8\x0d\xa9\x96\xb6\x7d\x53\x3a\x86\x0d\x95\x71\x4e\x74\x3e\xe9\x1c\x11\x28\x74\xee\x6b\xdf\x4f\x7a\xc7\x07\x16\xb2\x63\x4b\x8b\x25\xd3\x3b\x60\xf3\x86\x47\xc4\x51\xac\x4c\x7e\x07\xec\xe2\xa2\x3f\xc7\xfe\xd8\x12\xc6\xcd\xd8\x1f\xd8\x8f\x91\x79\x88\x2c\x6b\x48\x12\xe8\x8b\xd0\xfd\xb5\xe4\x75\xc9\x59\x86\x63\x76\x09\x57\x93\xbb\xc1\xa1\xa9\x42\x72\x7f\xf8\x6a\x1f\x0f\xbb\xde\xd1\xc6\xee\xae\x67\x60\xe7\xc8\x3d\x13\xfb\xbe\x9d\x06\x02\x2b\xa6\x0d\x54\x8a\x43\x1d\x3b\xbc\x33\x9f\x7c\xeb\x06\x76\x8d\x7b\x80\xf6\xfa\xa2\x46\x6a\x57\x69\x4f\x2b\xd2\x28\xe8\xf8\xdf\xbe\xfb\xfa\xab\x48\x1b\xc5\xc4\x8a\x2d\xb7\xe3\xc7\x4a\xf1\x19\x3c\x1f\x07\xff\xaf\x52\x3c\x98\xfc\x30\xfd\x31\x5a\x13\x5e\xe1\xa5\x43\xcf\xcc\xfd\x7b\xc0\xe9\x12\xea\xcb\x19\xec\x33\xdd\x4d\x26\x77\xc7\x5b\x9e\x9d\xde\xad\x42\x8d\x66\x6c\x07\x3f\x2d\xab\x03\x73\x11\x28\xd0\xe4\xd2\x05\x08\x85\x99\x14\x02\x33\x03\x55\x29\x45\xad\x11\x70\xa9\x75\x07\xdc\xcd\x90\x64\x18\x62\xf5\xa4\xc4\x55\x15\xff\x89\xe9\x77\x32\xbb\x47\x33\x1e\x8f\x37\x4c\x50\xb9\x89\xb8\xf4\x21\x3f\xb2\x91\x40\x66\x92\x43\x92\x24\x50\xa7\xfb\x60\x02\x9f\x43\xb0\xd1\x36\xf1\x07\x30\xb3\x97\xf6\x6a\x02\x17\xd0\x9f\x9e\xdb\xc2\xe4\x02\x82\x98\x94\x2c\x98\xdc\x3d\xeb\xfb\x41\x8a\x02\xb5\x26\x2b\xec\x0a\xea\xb6\xf9\x7d\xa4\x5a\xb5\x0a\xbd\x82\x04\x9c\xdb\x4a\xa2\x34\xfa\x91\x11\x25\x86\xf4\xc0\x6a\x97\x81\x1b\x9d\x24\x20\x2a\xce\x87\x70\xef\x97\xe0\x5d\x0f\xb7\x43\x64\x22\x9f\x1d\x3f\x4b\x12\xa8\x04\x75\x1e\xa1\x43\x14\x2d\x76\x7c\x97\x6a\x12\xd9\x9c\xf6\x34\x77\xd2\x67\x73\x8c\x0b\xd2\xf3\xd9\x20\xed\xf3\x41\x7a\x16\x23\xd7\x60\x3c\x8f\x8f\x6f\x4d\x76\xd8\xb8\x07\x67\x71\x11\x55\x91\xa2\x3a\x8f\x8d\xef\x37\xd6\x6c\x9c\x6f\xdf\x09\xd3\xa1\x72\x09\x57\xaf\x27\x67\x71\x45\xa5\xe4\x19\x4c\x85\x34\xdb\xf1\x23\x27\x5b\x5b\x70\xc2\xc8\xc8\xf2\xad\x6b\x08\x8e\x2e\x5d\x35\x32\x83\x96\xd6\xa5\x3b\xca\x9a\xc1\xc8\xdd\xd9\xf7\xac\x40\x37\xeb\xd5\x74\x3a\xbd\x84\xe6\x2c\xfa\xaf\xc4\xc6\x08\x55\xe1\xee\x2c\x39\x75\x95\x65\xb6\x42\xfa\x34\x92\xd6\xd4\x5a\x59\xeb\xfb\x4f\x26\x6d\x9b\x2d\xf7\xc4\x85\x3f\xff\x19\x0e\xde\x1e\x5b\x6e\x71\x0c\xff\x41\xd4\xbd\xeb\xce\x95\x0a\xd7\xae\x83\xd7\xce\x2c\x98\xd6\xae\x33\xa6\x81\x4a\x81\x07\xb3\x3f\x36\x1f\x0e\x29\x51\xcf\x81\x05\x4c\xfb\x1a\xd8\xa0\xdf\x49\x99\x03\x99\xf4\x18\x13\x38\x9e\x1a\x0f\xcd\xda\x95\x6c\x8f\x07\x2b\x10\x3e\x4b\x20\x08\x4e\xb1\x39\x98\x61\x27\x0c\xb3\x05\x17\x6a\xcd\x7b\x0f\x82\x71\x5d\x98\x0c\x55\x08\x93\x4b\xb8\x99\x4e\xa7\x47\x92\xfe\xa1\xf8\x87\x4f\xe2\x18\xde\x94\xb6\xce\x05\x22\xb6\x2e\xb1\xb4\xde\x75\xdb\x00\x5b\xb3\xda\xc4\xc0\x21\x93\x9c\xfb\xf2\xf2\x80\x88\x75\x71\xdd\x55\x4d\x20\xbc\x3a\x94\xa6\x6b\xb2\x8e\x23\x8f\xd9\xab\x8f\x9b\x01\x1c\x9c\xc4\x4e\x9f\xe5\x0f\xbd\xc9\xe1\xd5\x1e\x60\xf6\xb0\x74\x1e\x68\xc0\x7d\x5e\x52\x6b\xcc\x8e\xbb\x11\x4e\x03\x0c\x8e\x82\xec\x1c\xdf\x75\xcc\xe4\x65\xb9\xb8\xfa\x18\x6b\xb5\x63\xcb\x4a\xe7\xe3\x9e\x31\x06\xa0\x35\x08\xa2\x77\x06\x95\xdd\x9c\x49\x5b\xa1\x58\xd0\xd8\x1d\xa8\xc2\x03\xec\xb8\x1d\xa2\xc2\x50\xa1\xa0\xa8\x9a\x8a\xd2\x6f\x28\xed\x5e\xe2\x08\xb6\x7c\xdf\x63\x78\xc9\xfc\x96\x28\xe3\x0a\x7f\x29\xd0\x5e\x27\x03\x6b\xf4\xf8\x22\xb5\x33\x91\x93\x52\x23\x85\x04\xfc\x67\x5e\xe3\x49\x54\x09\xf6\x30\x9e\x84\xf5\x7d\x9f\x60\xf3\xfe\x6e\xb8\x3f\xd6\xe8\x79\x91\x40\x30\x37\x0a\x18\x4d\x46\x01\x5c\x0c\x45\x34\x5b\x9f\x8d\x16\x47\x64\xeb\xd2\x71\x67\x69\x0b\x77\x36\xe4\xdb\x0d\xff\x0c\x52\x92\xdd\xaf\xdc\x3e\x7e\x66\x2b\xf6\xf1\x01\x0f\xb2\x26\x86\x28\xc7\x62\x72\x07\x4f\xc3\xeb\x9e\x47\x66\x9d\x7c\x57\x7f\x77\xe5\x4e\xa2\xa0\x3d\x79\x76\x77\xa9\x54\x14\x55\xa8\x08\x65\x95\x9e\xc1\xcb\xf2\xe1\xee\x9f\xcd\x29\xbe\x3b\x65\x3b\x5f\xee\x52\xe1\xe2\x40\xbc\xfa\xa4\xe5\x02\x82\x79\x6c\x07\xfc\x2a\x9a\xad\x19\xba\xdf\x8d\xc1\xc0\x29\x23\xb4\x5f\x6d\xd5\xcf\x0b\x46\x29\x47\xab\xca\x11\x5e\x36\xe6\x58\x34\x9d\x8a\x1c\xfb\xf2\x40\x7d\xf6\x78\x84\xe0\x0e\x90\xeb\xfe\x47\x6a\xa7\xa8\xb5\x67\x9c\x23\x0b\xb7\xd0\x5a\x8e\x39\x3f\xd6\xfd\x27\xf7\x58\x8d\x9c\x49\xeb\x4f\x13\x69\xa5\x5c\xd9\x3f\x0e\x6b\x38\x5f\xc2\x48\xdb\xad\x08\xd5\xa3\x49\x94\x57\x05\x11\xec\x67\x1c\xdb\xb2\x63\xe2\x4d\xee\x0e\x4d\x8f\x49\x7c\x86\x13\xf6\x8e\x2a\x47\x4d\x71\x33\xaa\x1d\x33\x6a\xb0\xf4\xf2\xa9\x11\x36\x83\xe9\xdd\x51\xb4\x7f\x8c\xd5\x87\x45\x08\x53\xa2\xa0\x7b\x13\x36\x25\x19\x28\x69\x45\x6b\xde\xa5\x44\x8d\x7c\x7f\xd0\x6d\x36\x85\xdc\x24\xa3\x9b\x69\xab\x81\x47\x96\x03\xd6\xa8\x86\xfd\x69\x07\x5b\x15\x9a\x60\xb2\x80\x9b\xa3\x89\xf1\xb7\xa8\xe2\x9b\x8e\x3d\xf5\x8c\x62\x25\x52\x20\x99\x61\x6b\xfc\xbd\xb5\xfc\x1d\xdc\xf3\xab\xe5\xb7\xc0\x6f\x2c\xed\xd6\xc5\x9e\x32\xf6\x6d\xeb\x88\xff\x6f\x43\x03\xc4\xce\x1d\x17\x10\xfc\xb2\x96\xe7\x41\xff\x14\x89\x5e\xb0\x3a\x33\xac\xb9\x4f\x13\x06\xc6\x1d\x0a\x64\x77\x6d\xed\x07\x3f\x93\x28\x37\x05\x1f\x07\x73\xe3\x3e\x58\xb5\xba\xb7\x54\x1d\x51\xff\xf8\xe8\x56\x63\x77\xd8\x17\xc8\xb8\xd4\xd8\x6b\x5f\x74\x4b\xd9\xb6\xc5\xd1\xd4\xad\x4d\xd3\x64\xd7\xb4\x4e\xbe\x33\x44\x19\x20\xf0\xfd\x3b\xa8\x4a\x4a\x8c\x3f\xe8\xb7\x95\x89\x3f\x8d\x6a\xbe\x21\x4e\x89\xd2\x36\xf3\x6f\x88\xa2\x75\x7f\xd5\xe4\xb8\x75\x07\xfd\xed\x5e\x44\xa3\x79\x67\x43\xf9\x9a\xf0\xf1\x60\x47\xe5\xf9\x78\x14\x75\x01\x35\x9a\x44\x48\xb2\x7c\x78\x30\xd4\x59\xbf\x95\x21\x81\xaf\xdc\x3e\x77\xfc\x7c\x6c\x72\xa6\x27\x11\x31\x46\x8d\x47\x7b\x88\x1b\x4d\x2c\x78\xae\x0e\x1b\x1d\x2d\x95\xf9\x91\xf5\x7e\x8a\xe8\xd3\x96\x70\xa0\x3e\x6b\x26\x66\x5a\x8f\x3d\xae\x47\x97\x1d\x7e\xfb\xb0\x1e\xbd\x18\xf5\x1d\xfc\x14\x92\x9e\x34\x4d\x7e\x41\xc8\x3d\x5e\x23\x1b\x13\xfa\x64\xf7\x54\xa2\xf4\xad\x5d\xda\xe3\x60\x20\x42\x9d\x00\xdc\x64\xcf\x71\x3e\x95\x9d\xe3\x31\xff\xbd\xe4\x11\x77\x31\x3a\x9a\x44\xba\x4a\x7d\x4f\x71\xfc\xaa\xdf\xb1\x68\x46\xbb\xc5\xd2\xcf\x99\x07\x75\x9e\xe5\xb4\x5f\xeb\x85\xbd\xda\xf0\x44\x7a\xed\x70\xae\x75\xdd\x5d\x5a\x6f\x4d\x27\x4f\xbd\xee\x2f\xb4\xad\x93\xfd\xe9\xe2\x06\x53\xed\x7a\x80\x50\x2f\x2b\xd7\x97\xf5\xfd\xd7\x37\xdf\xbc\xeb\xf6\x60\xdb\x95\x67\x8b\xcf\xf6\xaf\x10\x0e\x7b\x9d\x83\x7f\xf4\xb0\xd9\x6c\x22\x7f\xb0\xee\x8e\x09\xdb\x36\x68\x4c\x4a\x16\x7d\xd0\x01\x10\xbd\x15\x19\x50\x5c\xa2\x5a\x74\x88\xfb\xde\xe8\x3c\xae\x3f\x88\x8f\xfd\xdf\x20\xfd\x4f\x00\x00\x00\xff\xff\x69\x18\xd0\xfe\x94\x34\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
